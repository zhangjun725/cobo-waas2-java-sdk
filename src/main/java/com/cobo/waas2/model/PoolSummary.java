/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.WalletSubtype;
import com.cobo.waas2.model.WalletType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The basic information of the staking pool.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class PoolSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_PROTOCOL_ICON_URL = "protocol_icon_url";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_ICON_URL)
  private String protocolIconUrl;

  public static final String SERIALIZED_NAME_SUPPORTED_WALLET_TYPES = "supported_wallet_types";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_WALLET_TYPES)
  private List<WalletType> supportedWalletTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_WALLET_SUBTYPES = "supported_wallet_subtypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_WALLET_SUBTYPES)
  private List<WalletSubtype> supportedWalletSubtypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_EST_APR = "est_apr";
  @SerializedName(SERIALIZED_NAME_EST_APR)
  private Float estApr;

  public PoolSummary() {
  }

  public PoolSummary id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PoolSummary chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * The chain ID.
   * @return chainId
  **/
  @javax.annotation.Nonnull
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public PoolSummary protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The name of the protocol.
   * @return protocol
  **/
  @javax.annotation.Nonnull
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public PoolSummary protocolIconUrl(String protocolIconUrl) {
    this.protocolIconUrl = protocolIconUrl;
    return this;
  }

   /**
   * The URL of the protocol&#39;s icon.
   * @return protocolIconUrl
  **/
  @javax.annotation.Nonnull
  public String getProtocolIconUrl() {
    return protocolIconUrl;
  }

  public void setProtocolIconUrl(String protocolIconUrl) {
    this.protocolIconUrl = protocolIconUrl;
  }


  public PoolSummary supportedWalletTypes(List<WalletType> supportedWalletTypes) {
    this.supportedWalletTypes = supportedWalletTypes;
    return this;
  }

  public PoolSummary addSupportedWalletTypesItem(WalletType supportedWalletTypesItem) {
    if (this.supportedWalletTypes == null) {
      this.supportedWalletTypes = new ArrayList<>();
    }
    this.supportedWalletTypes.add(supportedWalletTypesItem);
    return this;
  }

   /**
   * The wallet type. Possible values include:  - &#x60;Custodial&#x60;: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)  - &#x60;MPC&#x60;: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)  - &#x60;SmartContract&#x60;: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)  - &#x60;Exchange&#x60;: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
   * @return supportedWalletTypes
  **/
  @javax.annotation.Nonnull
  public List<WalletType> getSupportedWalletTypes() {
    return supportedWalletTypes;
  }

  public void setSupportedWalletTypes(List<WalletType> supportedWalletTypes) {
    this.supportedWalletTypes = supportedWalletTypes;
  }


  public PoolSummary supportedWalletSubtypes(List<WalletSubtype> supportedWalletSubtypes) {
    this.supportedWalletSubtypes = supportedWalletSubtypes;
    return this;
  }

  public PoolSummary addSupportedWalletSubtypesItem(WalletSubtype supportedWalletSubtypesItem) {
    if (this.supportedWalletSubtypes == null) {
      this.supportedWalletSubtypes = new ArrayList<>();
    }
    this.supportedWalletSubtypes.add(supportedWalletSubtypesItem);
    return this;
  }

   /**
   * The wallet subtype. Possible values include: - &#x60;Asset&#x60;: Custodial Wallets (Asset Wallets). - &#x60;Web3&#x60;: Custodial Wallets (Web3  Wallets). - &#x60;Org-Controlled&#x60;: MPC Wallets (Organization-Controlled Wallets). - &#x60;User-Controlled&#x60;: MPC Wallets (User-Controlled Wallets). - &#x60;Safe{Wallet}&#x60;: Smart Contract Wallets (Safe{Wallet}). - &#x60;Main&#x60;: Exchange Wallets (Main Account). - &#x60;Sub&#x60;: Exchange Wallets (Sub Account). 
   * @return supportedWalletSubtypes
  **/
  @javax.annotation.Nonnull
  public List<WalletSubtype> getSupportedWalletSubtypes() {
    return supportedWalletSubtypes;
  }

  public void setSupportedWalletSubtypes(List<WalletSubtype> supportedWalletSubtypes) {
    this.supportedWalletSubtypes = supportedWalletSubtypes;
  }


  public PoolSummary tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * The token ID.
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public PoolSummary estApr(Float estApr) {
    this.estApr = estApr;
    return this;
  }

   /**
   * The estimated annual percentage rate (APR).
   * @return estApr
  **/
  @javax.annotation.Nonnull
  public Float getEstApr() {
    return estApr;
  }

  public void setEstApr(Float estApr) {
    this.estApr = estApr;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PoolSummary instance itself
   */
  public PoolSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolSummary poolSummary = (PoolSummary) o;
    return Objects.equals(this.id, poolSummary.id) &&
        Objects.equals(this.chainId, poolSummary.chainId) &&
        Objects.equals(this.protocol, poolSummary.protocol) &&
        Objects.equals(this.protocolIconUrl, poolSummary.protocolIconUrl) &&
        Objects.equals(this.supportedWalletTypes, poolSummary.supportedWalletTypes) &&
        Objects.equals(this.supportedWalletSubtypes, poolSummary.supportedWalletSubtypes) &&
        Objects.equals(this.tokenId, poolSummary.tokenId) &&
        Objects.equals(this.estApr, poolSummary.estApr)&&
        Objects.equals(this.additionalProperties, poolSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, chainId, protocol, protocolIconUrl, supportedWalletTypes, supportedWalletSubtypes, tokenId, estApr, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    protocolIconUrl: ").append(toIndentedString(protocolIconUrl)).append("\n");
    sb.append("    supportedWalletTypes: ").append(toIndentedString(supportedWalletTypes)).append("\n");
    sb.append("    supportedWalletSubtypes: ").append(toIndentedString(supportedWalletSubtypes)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    estApr: ").append(toIndentedString(estApr)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("chain_id");
    openapiFields.add("protocol");
    openapiFields.add("protocol_icon_url");
    openapiFields.add("supported_wallet_types");
    openapiFields.add("supported_wallet_subtypes");
    openapiFields.add("token_id");
    openapiFields.add("est_apr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("chain_id");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("protocol_icon_url");
    openapiRequiredFields.add("supported_wallet_types");
    openapiRequiredFields.add("supported_wallet_subtypes");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("est_apr");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PoolSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolSummary is not found in the empty JSON string", PoolSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PoolSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("chain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain_id").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (!jsonObj.get("protocol_icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_icon_url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_wallet_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_wallet_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_wallet_types` to be an array in the JSON string but got `%s`", jsonObj.get("supported_wallet_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_wallet_subtypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_wallet_subtypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_wallet_subtypes` to be an array in the JSON string but got `%s`", jsonObj.get("supported_wallet_subtypes").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolSummary>() {
           @Override
           public void write(JsonWriter out, PoolSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PoolSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PoolSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PoolSummary
  * @throws IOException if the JSON string is invalid with respect to PoolSummary
  */
  public static PoolSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolSummary.class);
  }

 /**
  * Convert an instance of PoolSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


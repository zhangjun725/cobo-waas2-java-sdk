/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.Activity;
import com.cobo.waas2.model.ActivityStatus;
import com.cobo.waas2.model.ActivityType;
import com.cobo.waas2.model.CreateStakeActivity201Response;
import com.cobo.waas2.model.CreateStakeActivityRequest;
import com.cobo.waas2.model.CreateUnstakeActivityRequest;
import com.cobo.waas2.model.CreateWithdrawActivityRequest;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.GetStakingEstimationFee201Response;
import com.cobo.waas2.model.GetStakingEstimationFeeRequest;
import com.cobo.waas2.model.ListStakingActivities200Response;
import com.cobo.waas2.model.ListStakingPools200Response;
import com.cobo.waas2.model.ListStakings200Response;
import com.cobo.waas2.model.PoolDetails;
import com.cobo.waas2.model.Stakings;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StakingsApi
 */
@Disabled
public class StakingsApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final StakingsApi api = new StakingsApi();

    /**
     * Create stake activity
     *
     * This operation creates a staking request.  For some protocols, you can use the &#x60;fee&#x60; property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee.   &lt;Note&gt;For the Babylon protocol, you can only select UTXO as the fee model.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStakeActivityTest() throws ApiException {
        CreateStakeActivityRequest createStakeActivityRequest = null;
        CreateStakeActivity201Response response = api.createStakeActivity(createStakeActivityRequest);
        // TODO: test validations
    }

    /**
     * Create unstake activity
     *
     * This operation creates an unstaking request.   For some protocols, you can use the &#x60;fee&#x60; property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee.   &lt;Note&gt;For the Babylon protocol, you can only select UTXO as the fee model.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUnstakeActivityTest() throws ApiException {
        CreateUnstakeActivityRequest createUnstakeActivityRequest = null;
        CreateStakeActivity201Response response = api.createUnstakeActivity(createUnstakeActivityRequest);
        // TODO: test validations
    }

    /**
     * Create withdraw activity
     *
     * This operation creates a withdrawal request.   For some protocols, you can use the &#x60;fee&#x60; property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee.   &lt;Note&gt;For the Babylon protocol, you can only select UTXO as the fee model.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWithdrawActivityTest() throws ApiException {
        CreateWithdrawActivityRequest createWithdrawActivityRequest = null;
        CreateStakeActivity201Response response = api.createWithdrawActivity(createWithdrawActivityRequest);
        // TODO: test validations
    }

    /**
     * Get staking activity details
     *
     * This operation retrieves the details of a specified staking activity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStakingActivityByIdTest() throws ApiException {
        String activityId = null;
        Activity response = api.getStakingActivityById(activityId);
        // TODO: test validations
    }

    /**
     * Get staking position details
     *
     * This operation retrieves the detailed information about a specified staking position. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStakingByIdTest() throws ApiException {
        String stakingId = null;
        Stakings response = api.getStakingById(stakingId);
        // TODO: test validations
    }

    /**
     * Estimate staking fees
     *
     * This operation calculates the fee required for a staking activity based on factors such as network congestion and transaction complexity.  For some protocols, you can use the &#x60;fee.fee_rate&#x60; property in the request body to specify the fee rate you are willing to pay.  The &#x60;fee.max_fee_amount&#x60; property in the request body will be ignored.  &lt;Note&gt;For the Babylon protocol, you can only select UTXO as the fee model.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStakingEstimationFeeTest() throws ApiException {
        GetStakingEstimationFeeRequest getStakingEstimationFeeRequest = null;
        GetStakingEstimationFee201Response response = api.getStakingEstimationFee(getStakingEstimationFeeRequest);
        // TODO: test validations
    }

    /**
     * Get staking pool details
     *
     * This operation retrieves the detailed information about a specified staking pool. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStakingPoolByIdTest() throws ApiException {
        String poolId = null;
        PoolDetails response = api.getStakingPoolById(poolId);
        // TODO: test validations
    }

    /**
     * List staking activities
     *
     * This operation retrieves a list of staking activities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStakingActivitiesTest() throws ApiException {
        String poolId = null;
        String stakingId = null;
        ActivityType activityType = null;
        ActivityStatus activityStatus = null;
        Long minModifiedTimestamp = null;
        Long maxModifiedTimestamp = null;
        String initiator = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListStakingActivities200Response response = api.listStakingActivities(poolId, stakingId, activityType, activityStatus, minModifiedTimestamp, maxModifiedTimestamp, initiator, limit, before, after);
        // TODO: test validations
    }

    /**
     * List staking pools
     *
     * This operation retrieves a list of staking pools currently supported. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStakingPoolsTest() throws ApiException {
        String chainId = null;
        String tokenId = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListStakingPools200Response response = api.listStakingPools(chainId, tokenId, limit, before, after);
        // TODO: test validations
    }

    /**
     * List staking positions
     *
     * This operation retrieves a list of staking positions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStakingsTest() throws ApiException {
        String poolId = null;
        String statuses = null;
        UUID walletId = null;
        String tokenId = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListStakings200Response response = api.listStakings(poolId, statuses, walletId, tokenId, limit, before, after);
        // TODO: test validations
    }

}
